#! (C) Copyright 2022- ECMWF.
#! (C) Copyright 2022- Meteo-France.
#!
#! This software is licensed under the terms of the Apache Licence Version 2.0
#! which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
#! In applying this licence, ECMWF does not waive the privileges and immunities
#! granted to it by virtue of its status as an intergovernmental organisation
#! nor does it submit to any jurisdiction.

#:set fieldTypeList = fieldType.getFieldTypeList (ranks=[RANK], kinds=['JP' + SUFF])
#:set ft = fieldTypeList[0]
MODULE ${ft.name}$_CLONE_MODULE

${fieldType.useParkind1 ()}$

IMPLICIT NONE

#:for TARGET in ["HOST", "DEVICE"]
INTERFACE FIELD_CLONE_ON_${TARGET}$
  MODULE PROCEDURE :: ${ft.name}$_CLONE_ON_${TARGET}$
END INTERFACE FIELD_CLONE_ON_${TARGET}$
PUBLIC :: FIELD_CLONE_ON_${TARGET}$
#:endfor

CONTAINS

#:for TARGET in ["HOST", "DEVICE"]

SUBROUTINE ${ft.name}$_CLONE_ON_${TARGET}$(YL, YR)
  USE ${ft.name}$_MODULE
  USE ${ft.name}$_FACTORY_MODULE
  USE ${ft.name}$_ACCESS_MODULE
  CLASS (${ft.name}$), POINTER :: YL
  CLASS (${ft.name}$), OPTIONAL, POINTER :: YR

  INTEGER :: ILBOUNDS (${RANK}$), IUBOUNDS (${RANK}$)
  ${ft.type}$, POINTER :: ZL (${ft.shape}$), ZR (${ft.shape}$)
  INTEGER(KIND=JPIM) :: ${','.join([f'J{i}'.upper() for i in range(1, ft.rank+1)])}$

  IF(.NOT. PRESENT(YR))THEN
    YL => NULL()
    RETURN
  ENDIF

  IF(.NOT. ASSOCIATED(YR))THEN
    YL => NULL()
    RETURN
  ENDIF

  CALL YR%GET_DIMS (LBOUNDS=ILBOUNDS, UBOUNDS=IUBOUNDS)
  CALL FIELD_NEW (YL, PERSISTENT=.TRUE., LBOUNDS=ILBOUNDS, UBOUNDS=IUBOUNDS)

  ZR => GET_${TARGET}$_DATA_RDONLY (YR)
  ZL => GET_${TARGET}$_DATA_RDWR (YL)

#! OpenMP offload does not have an equivalent for the kernels command,
#! which means we cannot rely on array notation here and must generate
#! a nested gang-vector loop. 
#:for i in range(ft.rank, 0, -1)
#:set indent = ' ' * (1 + (ft.rank-i)*2)
#:if i == ft.rank
#:if i == 1
$:offload_macros.parallel_gang_vector_loop(present=['ZR', 'ZL']) if TARGET=="DEVICE" else None
#:else
$:offload_macros.parallel_gang_loop(present=['ZR', 'ZL']) if TARGET=="DEVICE" else None
#:endif
#:endif
#:if i == 1 and ft.rank > 1
$:offload_macros.parallel_vector_loop() if TARGET=="DEVICE" else None
#:endif
${indent}$ DO ${f'J{i}'.upper()}$ = LBOUND(ZL,${i}$), UBOUND(ZL,${i}$)
#:endfor
${' ' * (ft.rank * 2 + 1)}$ ZL(${','.join([f'J{i}'.upper() for i in range(1, ft.rank+1)])}$) = ZR(${','.join([f'J{i}'.upper() for i in range(1, ft.rank+1)])}$)
#:for i in range(1, ft.rank + 1)
#:set indent = ' ' * (1 + (ft.rank-i)*2)
${indent}$ ENDDO
#:endfor

END SUBROUTINE ${ft.name}$_CLONE_ON_${TARGET}$
#:endfor

END MODULE ${ft.name}$_CLONE_MODULE
