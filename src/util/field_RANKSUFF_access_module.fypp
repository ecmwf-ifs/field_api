#! (C) Copyright 2022- ECMWF.
#! (C) Copyright 2022- Meteo-France.
#!
#! This software is licensed under the terms of the Apache Licence Version 2.0
#! which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
#! In applying this licence, ECMWF does not waive the privileges and immunities
#! granted to it by virtue of its status as an intergovernmental organisation
#! nor does it submit to any jurisdiction.

MODULE FIELD_${RANK}$${SUFF}$_ACCESS_MODULE

#:set fieldTypeList = fieldType.getFieldTypeList (ranks=[RANK], kinds=['JP' + SUFF])
#:set dumsize = '1'

USE FIELD_${RANK}$${SUFF}$_MODULE

${fieldType.useParkind1 ()}$

IMPLICIT NONE

PRIVATE

#:for mode in ['RDONLY', 'RDWR']
#:for what in ['DEVICE', 'HOST']

INTERFACE SGET_${what}$_DATA_${mode}$
#:for ft in fieldTypeList
  MODULE PROCEDURE :: SGET_${what}$_DATA_${mode}$_${ft.name}$
#:endfor
END INTERFACE SGET_${what}$_DATA_${mode}$

PUBLIC :: SGET_${what}$_DATA_${mode}$

INTERFACE GET_${what}$_DATA_${mode}$
#:for ft in fieldTypeList
  MODULE PROCEDURE :: GET_${what}$_DATA_${mode}$_${ft.name}$
#:endfor
END INTERFACE GET_${what}$_DATA_${mode}$

PUBLIC :: GET_${what}$_DATA_${mode}$

#:endfor
#:endfor

#:for ft in fieldTypeList
${ft.type}$, TARGET, SAVE :: DUMMY_${ft.name}$ (${ ', '.join ([dumsize] * (ft.rank-1) + ['1']) }$)
$:offload_macros.Declare(create=[f'DUMMY_{ft.name}',])

#:endfor

CONTAINS

#:for mode in ['RDONLY', 'RDWR']
#:for what in ['DEVICE', 'HOST']

#:for ft in fieldTypeList
  SUBROUTINE SGET_${what}$_DATA_${mode}$_${ft.name}$ (PTR, FIELD_PTR) 
    USE FIELD_DEFAULTS_MODULE

    CLASS (${ft.name}$), POINTER, OPTIONAL :: FIELD_PTR
    ${ft.type}$, POINTER :: PTR(${ft.shape}$)
    INTEGER*8 :: ICRC
    CHARACTER*1024 :: CLBT
    CHARACTER*10 :: CLF
    INTEGER :: ILEN, IP1, IP2


    ICRC = 0

    IF (PRESENT (FIELD_PTR)) THEN
      IF (ASSOCIATED (FIELD_PTR)) THEN
        CALL FIELD_PTR%GET_${what}$_DATA_${mode}$ (PTR)

#:if defined('WITH_FIAT')
        IF (GET_DEBUG_PRINT_CRC) THEN
          ICRC = FIELD_PTR%CRC64 ()
        ENDIF
#:endif

      ELSE
        PTR => DUMMY_${ft.name}$
      ENDIF
    ELSE
      PTR => DUMMY_${ft.name}$
    ENDIF


    IF (GET_DEBUG_PRINT_CRC) THEN
      WRITE (0, '(Z16.16," ")', ADVANCE='NO') ICRC
    ENDIF
    
    IF (GET_DEBUG_PRINT_LOCATION .OR. GET_DEBUG_PRINT_CRC) THEN
      CLF = "${ft.name}$"
      WRITE (0, '(A10)', ADVANCE='NO') CLF
      CLF = "${mode}$"
      WRITE (0, '(A10)', ADVANCE='NO') CLF
      CLF = "${what}$"
      WRITE (0, '(A10)', ADVANCE='NO') CLF
    ENDIF

    IF (GET_DEBUG_PRINT_LOCATION) THEN
      ILEN = LEN (CLBT)
      IP1 = 2
      IP2 = 2 + GET_DEBUG_PRINT_LOCATION_DEPTH
      CALL FIELD_BACKTRACE (CLBT, IP1, IP2, ILEN)
      WRITE (0, '(A)', ADVANCE='NO') CLBT (1:ILEN)
    ENDIF

    IF (GET_DEBUG_PRINT_LOCATION .OR. GET_DEBUG_PRINT_CRC) THEN
      WRITE (0, *)
    ENDIF

  END SUBROUTINE SGET_${what}$_DATA_${mode}$_${ft.name}$

  FUNCTION GET_${what}$_DATA_${mode}$_${ft.name}$ (FIELD_PTR) RESULT (PTR)
    CLASS (${ft.name}$), POINTER :: FIELD_PTR
    ${ft.type}$, POINTER :: PTR(${ft.shape}$)

    CALL SGET_${what}$_DATA_${mode}$_${ft.name}$ (PTR, FIELD_PTR)

  END FUNCTION GET_${what}$_DATA_${mode}$_${ft.name}$

#:endfor

#:endfor
#:endfor

END MODULE FIELD_${RANK}$${SUFF}$_ACCESS_MODULE
